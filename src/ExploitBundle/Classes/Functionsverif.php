<?php
/**
 * Created by PhpStorm.
 * User: aboussadia
 * Date: 05/04/2018
 * Time: 14:43
 */

namespace ExploitBundle\Classes;


use ExploitBundle\Resources\config\Connexion;
use ExploitBundle\Repository\IntegRepository;

class Functionsverif
{

    public function suppr_accents($str, $encoding = 'utf-8')
    {
        // transformer les caractéres accentués en entités HTML
        $str = htmlentities($str, ENT_NOQUOTES, $encoding);
        // remplacer les entités HTML pour avoir juste le premier caractéres non accentués
        // Exemple : "&ecute;" => "e", "&Ecute;" => "E", "é " => "a" ...
        $str = preg_replace('#&([A-za-z])(?:acute|grave|cedil|circ|orn|ring|slash|th|tilde|uml);#', '\1', $str);
        // Remplacer les ligatures tel que : é, é ...
        // Exemple "œ" => "oe"
        $str = preg_replace('#&([A-za-z]{2})(?:lig);#', '\1', $str);
        // Supprimer tout le reste
        $str = preg_replace('#&[^;]+;#', '', $str);

        return mb_strtoupper($str);
    }


    /**
     * @param $i
     * @param $data
     * @param array $errors
     * @return array
     */
    public function verif_lenth($i, $data, $errors =array())
    {

            $tableau = [
                            1 => 13,
                            2 => 16,
                            3 => 12,
                            4 => 16,
                            5 => 30,
                            6 => 40,
                            7 => 40,
                            8 => 1000,
                            9 => 1,
                            10 => 6,
                            11 => 6,
                            12 => 6,
                            13 => 6,
                            14 => 6,
                            15 => 3,
                            16 => 6,
                            17 => 12,
                            18 => 6,
                            20 => 3,
                            22 => 40,
                            23 => 40,
                            26 => 3,
                            33 => 12,
                            35 => 3,
                            41 => 12,
                            42 => 12,
                            46 => 3,
                            47 => 1,
                            50  => 1,
                            51  => 12,
                            52  => 6,
                            53  => 40,
                            54  => 12,
                            55  => 16
                        ];

        foreach ($tableau as $key => $value) {
            if ($key == $i && strlen($data) > $value) {
                $errors = 'colonne '. $key . ' accepte ' . $value . ' caractères';
                //                echo $key, ' : key <br>';
//                echo $value, ' : Valeur <br>';
                $data_sub = substr($data, 0, $value);
                return array( 'data' => $data_sub, 'errors' => $errors);
            }
        }
        return  $data;

    }

    public function verifIntString($data = array(), $i)
    {
        $erreur= [];

        $tableau = [
            19 => 18,
            21 => 20,
            24 => 23,
            25 => 24,
            27 => 26,
            28 => 27,
            29 => 28,
            31 => 30,
            34 => 33,
            36 => 35,
            37 => 36,
            38 => 37,
            43 => 42,
            44 => 43,
            45 => 44

        ];
            foreach ($tableau as $key => $value){

              if ($data[$value] != '' && !is_numeric($data[$value])) {

                    $erreur[] = "Article rejeté Sur la Ligne  " . $i . " La valeur " . $data[$value] . " de la colonne : " . $value . "  n'est pas un numérique" ;
                }

          }return $erreur;
    }

    /**
     * @param $datas
     * @return bool
     */
    public function numericToString($datas)
    {
        // verif date
        $date_verif = [29,31,38,39,47,48];
        foreach($date_verif as $x){
        if (strlen($datas[$x]) == 10 && stripos($datas[$x], '/20' )){
            $datas[$x] = "to_date('$datas[$x]', 'DD/MM/YYYY')";
        }elseif ($datas[$x] ==''){
            $datas[$x] =  "''";
        }else{
            $erreur_date = 'Verifier les champs date ( en text ) ';
            return false;
        }
    }
        // vérif nombre
        $nb_verif = [18,20,23,24,26,27,28,30,33,35,36,37,42,43,44];
        foreach($nb_verif as $x) {
            if (($datas[$x]) != "") {
                $datas[$x] = "$datas[$x]";

            } else {
                $datas[$x] = "''";
            }
        }

        //Verif string
           $str_verif =[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,21,22,25,32,34,40,41,45,46,49,50,51,52,53,54];
        foreach($str_verif as $x){
                if (($datas[$x]) !="") {
                    $datas[$x] = str_replace("'", ' ', $datas[$x]); // remplace les ' par un espace dans les colonnes
                    $datas[$x] = $this->suppr_accents($datas[$x]);

                    $datas[$x] = "'$datas[$x]'";

                } else {
                    $datas[$x] = "''";
                }
            }

        return $datas;
    }

    public function verifDoublonTab($tab)
    {
            if (!is_array($tab))
                return false;
            $r_valeur = Array();
            $array_unique = array_unique($tab);
            if (count($tab) - count($array_unique)){
                for ($i=0; $i<count($tab); $i++) {
                    if (!array_key_exists($i, $array_unique))
                        $r_valeur[$i] = $tab[$i];

                }
            }
            return $r_valeur;
    }

    public function verifExisteProduitGce($listes,  $slug)
    {

        $erreur_existe=[];

        foreach ($listes as $liste){

        if(!empty($liste['CODE']) && !empty($slug) && !empty($liste['DATE'])){

            $date = $liste['DATE'];
            $code = $liste['CODE'];
            $pa_pv = $liste[$slug];
            $sode_str ="$code";

            if(!empty($liste['FOU'])){
                $fou = $liste['FOU'];

                if($fou == 'PF0' ){
                    $sql = "and ACHVTE ='A' and SIGTIE = '$fou'";
                }else{
                    $sql = "and ACHVTE ='A' and SIGTIE = '.$fou.'";
                }
                $typeInser = 'A';
            }else {
                $fou =" ";
                $sql = "and ACHVTE ='V'";
                $typeInser = 'V';
            }


            $repo = new IntegRepository();

            // si produit est n'est pas doublon !! insert
            $respProduitExiste = $repo->checkCodproTsc($sode_str, $date, $fou,  $sql);



            if($respProduitExiste == 0){
                // insert dans tsc
                $insertProduit = $repo->insertProduits($sode_str, $date,$pa_pv, $fou, $typeInser);

            }else{

                $erreur_existe[]= 'Produit déja inseré avec '.$fou.'  date debut : '.$date.' Code : '.$sode_str;

            }
           }
       };

       return $erreur_existe;


    }
}


