<?php
/**
 * Created by PhpStorm.
 * User: aboussadia
 * Date: 10/04/2018
 * Time: 15:24
 */

namespace ExploitBundle\Controller;

use PhpOffice\PhpSpreadsheet\Writer;
use ExploitBundle\Entity\Post;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\Request;
use ExploitBundle\Classes\Functionsverif;
use ExploitBundle\Resources\config\Connexion;
use Symfony\Component\HttpFoundation\Session\Session;


class IntegPaControlle extends Controller
{
    /**
     * Creates a new post integrtation PA entity.
     *
     * @Route("/{slug}/integration/", name="integpa_new")
     * @Method({"GET", "POST"})
     * @param $request
     * @param $slug
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
     */
    public function newAction($request, $slug)
    {

        $post = new Post();
        $form = $this->createForm('ExploitBundle\Form\PostType', $post);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $post->setUserId($this->getUser()->getId());
            $post->setGroupfile($slug);
            $post->setUpdateAt(new \DateTime());
            $post->setStatut(1);
            $em->persist($post);
            $em->flush();

            return $this->redirectToRoute('integpa_prepa', array('id' => $post->getId(), 'filename' => $post->getFilename(), 'slug' => $slug));
        }

        return $this->render('integpa/new.html.twig', array(
            'slug' => $slug,
            'post' => $post,
            'form' => $form->createView(),
        ));
    }

    /**
     * @Route("/{slug}/integpa", name="integ_pa")
     * @param Request $request
     * @param string $slug
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
     */
    public function integPaAction(Request $request, $slug = 'PA')
    {
        $session = new Session();
        $session->getFlashBag()->add('success', "AJOUTER UN FICHIER POUR LES PRIX D'ACHAT");
        return $this->newAction($request, $slug);
    }

    /**
     * @Route("/{slug}/integpv", name="integ_pv")
     * @param Request $request
     * @param string $slug
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
     */
    public function integPvAction(Request $request, $slug = 'PV')
    {
        $session = new Session();
        $session->getFlashBag()->add('success', "AJOUTER UN FICHIER POUR LES PRIX DE VENTE");

        return $this->newAction($request, $slug);
    }

    /**
     * Finds and displays a post entity.
     *
     * @Route("/PA_PV/integration/{id}/{slug}", name="integpa_prepa")
     * @Method("GET")
     * @param Post $post
     * @return \Symfony\Component\HttpFoundation\Response
     * @throws Writer\Exception
     * @throws \PhpOffice\PhpSpreadsheet\Reader\Exception
     */
    public function prepaAction(Post $post, $slug)
    {

        $filePath =  $post->getFile()->getRealPath();

        $file = new File($filePath);

        $reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReaderForFile($filePath);
        $reader->setReadDataOnly(true);
        $spreadsheet = $reader->load($filePath);

        $writer = new Writer\Csv($spreadsheet);
        $csv = $writer->save('../web/uploads/PA/fileCsv/'.$post->getFilename().'.csv');     // créer un csv

        return $this->render('integpa/prepapa.html.twig', array(
            'post' => $post,
            'slug' => $slug,
//            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * @param $id
     * @param $filename
     * @param $slug
     * @return \Symfony\Component\HttpFoundation\Response
     * @throws \Exception
     * @Route("/PA_PV/preparation/{id}/{filename}/{slug}", name="integpa_csv")
     */
    public function conversionCsvAction($id, $filename, $slug)
    {


        $filePathCsv = realpath(dirname(__FILE__) . '/../../../web/uploads/PA/fileCsv/' . $filename . '.csv');

        if($filePathCsv){

            $em = $this->getDoctrine()->getManager();
            $statut = $em->getRepository("ExploitBundle:Post")->findStatut($id, 2);

            if($statut) throw new \Exception("Ce  fichier est Déja intégré");

            $csv = array_map('str_getcsv', file($filePathCsv));
            array_walk($csv, function (&$a) use ($csv) {
//
                $a = array_combine($csv[0], $a);//
            });
            array_shift($csv); # remove column header

            $action =  $this->traitementPaAction($csv, $filename, $slug);


            $em->getRepository("ExploitBundle:Post")->updateStatut($id, 3); // update statut

        }else{
            throw new \Exception('Fichier introuvable');
        }

        return $this->render('integpa/reponsefin.html.twig', array(
            'erreurs' => $action,
        ));
    }


    /**
     * @param $csv
     * @param $filename
     * @param $slug
     * @return array
     * @throws \Exception
     */
    private function traitementPaAction($csv, $filename, $slug)
    {
        if (isset($csv[1][$slug])) {

            $func = new Functionsverif();
            $cont = count($csv);

            for ($i = 1; $i < $cont; $i++) {
                if ($csv[$i]['CODE'] != null) {
                    $liste[] = $csv[$i];
                    $codpro[] = $csv[$i]['CODE'];
                    $date[] = $csv[$i]['DATE'];
                    $pa_pv[] = $csv[$i][$slug];

                    if (isset($csv[0]['FOU'])) {    // si le Fou est renseigné
                        $fou[] = $csv[$i]['FOU'];
                    }
                };
            }

            $erreur_doublon =[];

        // verification des doublons et suppression de la ligne
            $doublon = $func->verifDoublonTab($codpro);

            foreach ($doublon as $key => $value) {

                $erreur_doublon[] = 'Doublon sur la linge ' . $key . ' CODE :' . $codpro[$key] . ' :' . $pa_pv[$key];

                unset($liste[$key]);
            }

            $respProduitExiste = $func->verifExisteProduitGce($liste, $slug);

        }else{
            throw new \Exception("Veuillez verifier le fichier Integration /PA ou /PV");
        }
            $erreur = ['erreur_doublon' => $erreur_doublon, 'erreur_existe' => $respProduitExiste];


        return $erreur;
    }
}