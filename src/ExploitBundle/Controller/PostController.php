<?php

namespace ExploitBundle\Controller;

use Ad\UploadBundle\Annotation\Uploadable;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer;
use ExploitBundle\Entity\Post;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\Request;
use PhpOffice\PhpSpreadsheet\Reader;
use ExploitBundle\Controller\ControlefileController;
use Symfony\Component\HttpFoundation\Session\Session;

/**
 * Post controller.
 *
 * @Route("post")
 */
class PostController extends Controller
{
    /**
     * Lists all post entities.
     *
     * @Route("/", name="post_index")
     * @Method("GET")
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        $posts = $em->getRepository('ExploitBundle:Post')->findAll();

        return $this->render('post/index.html.twig', array(
            'posts' => $posts,
        ));
    }

    /**
     * Creates a new post entity.
     *
     * @Route("/preparation", name="post_new")
     * @Method({"GET", "POST"})
     */
    public function newAction(Request $request)
    {
        $post = new Post();
        $form = $this->createForm('ExploitBundle\Form\PostType', $post);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $em = $this->getDoctrine()->getManager();
            $post->setUserId($this->getUser()->getId());
            $post->setUpdateAt(new \DateTime());
            $post->setStatut(1);
            $em->persist($post);
            $em->flush();

            return $this->redirectToRoute('post_prepa', array('id' => $post->getId(), 'filename' => $post->getFilename()));
        }

        return $this->render('post/new.html.twig', array(
            'post' => $post,
            'form' => $form->createView(),
        ));
    }

    /**
     * Finds and displays a post entity.
     *
     * @Route("/preparation/{id}", name="post_prepa")
     * @Method("GET")
     */
    public function prepaAction(Post $post)
    {
        $session = new Session();
        $filePath =  $post->getFile()->getRealPath();

        $file = new File($filePath);

        $reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReaderForFile($filePath);
        $reader->setReadDataOnly(true);
        $spreadsheet = $reader->load($filePath);
        $verif_entete =['EAN13','REFPRO','SIGFOU','MOTCLE','NOMPRO','DESIGN1','DESIGN2','DESIGN_LONG','CODTVA','RAYON','SOUSRAYON','FAMILLE','GAMME','STATUT','CODBLOCAGE','NATURE','MARQUE','MDD','POIDSNET','UNICOL','POIDS','POIDS_INFO','VOLUME_INFO','D3E','PA','UNITE_ACHAT','NBUVC_ACHAT','QTEMIN','QOTITE','DATDEB_PA','PV','DATDEB_PV','PF_SIGTIE','PCESSION','UNITE_CESSION','NBUVC_CESSION','QTEMIN_CESSION','PV_PROMO','DATDEB_PV_PROMO','DATFIN_PV_PROMO','CIBLE_PROMO','MAGASIN_CREATION','CSS_PM','CSS_MM','CSS_GM','TYPOLOGIE','WEB','DATMAR','DATFINMAR','DLUO','SEGMENT_PRODUIT','DISPLAY','AGE','ACTION','CODPRO'];
        $verif_entet_error=[];
        foreach ($verif_entete as $entete) {
            for ($i = 2; $i < 56; $i++) {
                $lire = $spreadsheet->getActiveSheet()->getCellByColumnAndRow($i, 2)->getValue();
               if($verif_entete[$i-2] == $lire){
                   $val[] =  true;
               }else{
                   $val[] =  false;
                   $verif_entet_error[]= "Erreur d'organisation du fichier type : colonne ".$verif_entete[$i-2];
               }

            }
        }

        $erreur_date=[];
        $erreur_num=[];
        // Verifier les numérique
        $verif_nb =[20,22,23,24,25,26,28,29,30,32,35,37,38,39,44,45,46];
        foreach ($verif_nb as $i){
            for($x = 6 ; $x< 1000; $x++){
                $lire = $spreadsheet->getActiveSheet()->getCellByColumnAndRow($i, $x)->getValue();
                if($lire != null){
                    if (is_numeric($lire)){
                        $val[] =  true;

                    }else{
                        $val[] =  false;
                        $nb = $i-1;
                        $erreur_num[]= "Colonne $nb  ligne $x  n'est pas un numérique  : ".$spreadsheet->getActiveSheet()->getCellByColumnAndRow($i, $x)->getValue();
                    }
                }

            }
        }

        //verifier les dates
        $date_verif = [31,33,40,41,49,50];
        foreach ($date_verif as $i){
            for($x = 6 ; $x< 1000; $x++){
                $lire = $spreadsheet->getActiveSheet()->getCellByColumnAndRow($i, $x)->getValue();
                if($lire != null){
                    if (strlen($lire) == 10 && stripos($lire, '/20' )){
                        $val[] =  true;
                    }else{
                        $val[] =  false;
                        $nb = $i-1;
                        $erreur_date[]= "Colonne $nb ligne $x  erreur sur la date  format  : ".$spreadsheet->getActiveSheet()->getCellByColumnAndRow($i, $x)->getValue();
                    }
                }

            }
        };
        if(empty($erreur_date) && empty($erreur_num)  && empty($verif_entet_error)) {
            $writer = new Writer\Csv($spreadsheet);

            $csv = $writer->save('../web/uploads/fileCsv/' . $post->getFilename() . '.csv'); // créer un csv
            $session->getFlashBag()->add('success', 'Création du fichier OK');
            return $this->render('post/prepa.html.twig', array(
                'post' => $post
            ));
        }else{
            $session->getFlashBag()->add('danger', 'Erreur dans la création, veuillez supprimer le fichier et recommencer ');
            $deleteForm = $this->createDeleteForm($post);
            return $this->render('post/erreurcsv.html.twig', array(
                'erreur_date' => $erreur_date,
                'erreur_num' => $erreur_num,
                'verif_entet_error' => $verif_entet_error,
                'post' => $post,
                'delete_form' => $deleteForm->createView(),
            ));
            }
    }

    /**
     * Finds and displays a post entity.
     *
     * @Route("/{id}", name="post_show")
     * @Method("GET")
     */
    public function showAction(Post $post)
    {
        $deleteForm = $this->createDeleteForm($post);

        return $this->render('post/show.html.twig', array(
            'post' => $post,
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Displays a form to edit an existing post entity.
     *
     * @Route("/{id}/edit", name="post_edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, Post $post)
    {
        $deleteForm = $this->createDeleteForm($post);
        $editForm = $this->createForm('ExploitBundle\Form\PostType', $post);
        $editForm->handleRequest($request);

        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $post->setUpdateAt(new \DateTime());
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('post_edit', array('id' => $post->getId()));
        }

        return $this->render('post/edit.html.twig', array(
            'post' => $post,
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Deletes a post entity.
     *
     * @Route("/{id}", name="post_delete")
     * @Method("DELETE")
     */
    public function deleteAction(Request $request, Post $post)
    {
        $form = $this->createDeleteForm($post);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
//            unlink('uploads/'.$post->getFilename()); // supprime le fichier
            $em->remove($post);
            $em->flush();
        }

        return $this->redirectToRoute('post_index');
    }

    /**
     * Creates a form to delete a post entity.
     *
     * @param Post $post The post entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Post $post)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('post_delete', array('id' => $post->getId())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }
}
