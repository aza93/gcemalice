<?php
/**
 * Created by PhpStorm.
 * User: aboussadia
 * Date: 25/04/2018
 * Time: 10:29
 */

namespace ExploitBundle\Controller;


use ExploitBundle\Resources\config\Connexion;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use ExploitBundle\Entity\Post;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\File\File;
use PhpOffice\PhpSpreadsheet\Writer;
use Symfony\Component\HttpFoundation\Session\Session;


class ProduitEnVnController extends Controller
{


    /**
     * @param Request $request
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
     * @Route("/VN/modif/", name="modif_vn")
     */
    public function newAction(Request $request)
    {
        $session = new Session();
        $session->getFlashBag()->add('success', "AJOUTER UN FICHIER POUR LES PRODUITS EN VN");

        $post = new Post();
        $form = $this->createForm('ExploitBundle\Form\PostType', $post);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $post->setUserId($this->getUser()->getId());
            $post->setGroupfile('VN');
            $post->setUpdateAt(new \DateTime());
            $post->setStatut(1);
            $em->persist($post);
            $em->flush();

            return $this->redirectToRoute('modifvn_prepa', array('id' => $post->getId(), 'filename' => $post->getFilename()));
        }

        return $this->render('produitsenvn/new.html.twig', array(
            'post' => $post,
            'form' => $form->createView(),
        ));
    }


    /**
     * @param Post $post
     * @return \Symfony\Component\HttpFoundation\Response
     * @throws Writer\Exception
     * @throws \PhpOffice\PhpSpreadsheet\Exception
     * @throws \PhpOffice\PhpSpreadsheet\Reader\Exception
     * @Route("/VN/modif/{id}/", name="modifvn_prepa")
     */
    public function prepaAction(Post $post)
    {

        $filePath =  $post->getFile()->getRealPath();

        $file = new File($filePath);

        $reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReaderForFile($filePath);
        $reader->setReadDataOnly(true);
        $spreadsheet = $reader->load($filePath);

        $lire = $spreadsheet->getActiveSheet()->getCellByColumnAndRow(1, 1)->getValue();
        $lire_ligne1000 = $spreadsheet->getActiveSheet()->getCellByColumnAndRow(1, 1001)->getValue();

        if($lire == 'CODPRO' && $lire_ligne1000 == '' ){

            $writer = new Writer\Csv($spreadsheet);
            $csv = $writer->save('../web/uploads/VN/fileCsv/'.$post->getFilename().'.csv');     // créer un csv

            return $this->render('produitsenvn/prepavn.html.twig', array(
                'post' => $post,
            ));
        }else{
            $session = new Session();
            $session->getFlashBag()->add('danger', "Erreur sur le fichier Type ");

            return $this->render('produitsenvn/erreurvn.html.twig', array(
                'id' => $post->getId()
            ));
        }

    }


    /**
     * @param $id
     * @param $filename
     * @return \Symfony\Component\HttpFoundation\Response
     * @throws \Exception
     * @Route("/VN/modif/{id}/{filename}/", name="modifvn_csv")
     */
    public function conversionCsvAction($id, $filename)
    {


        $filePathCsv = realpath(dirname(__FILE__) . '/../../../web/uploads/VN/fileCsv/' . $filename . '.csv');

        if($filePathCsv){

            $em = $this->getDoctrine()->getManager();
            $statut = $em->getRepository("ExploitBundle:Post")->findStatut($id, 2);

            if($statut) throw new \Exception("Ce  fichier est Déja intégré");

            $csv = array_map('str_getcsv', file($filePathCsv));
            array_walk($csv, function (&$a) use ($csv) {
                $a = array_combine($csv[0], $a);//
            });
            array_shift($csv); # remove column header

            $action =  $this->traitementvnAction($csv);

            $em->getRepository("ExploitBundle:Post")->updateStatut($id, 3); // update statut

            return $this->render('produitsenvn/validate.html.twig');

        }else{
            throw new \Exception('Fichier introuvable');
        }

        return $this->render('produitsenvn/validationvn.html.twig', array(
            'erreurs' => $action,
        ));
    }


    /**
     * @param $csv
     * @throws \Exception
     */
    public function traitementvnAction($csv)
    {
            $cont = count($csv);
            $liste=[];
            for ($i = 1; $i < $cont; $i++) {
                if ($csv[$i]['CODPRO'] != null) {
                    $liste[] = $csv[$i]['CODPRO'];
                };
            };
            $tab=[];
            foreach ($liste as $list){
                if($list !=''){

                    $tab[] = "'$list'";
                }
            }
            $listeproduit = implode(',', $tab);

            $sql  = "UPDATE pro set codblocage=decode(sigfou,'PF0','VC','VN'),natpro=decode(sigfou,'PF0','04','05'),datmod=to_char(sysdate,'yyyymmdd'),utimod='VN' where codsoc=1 and codpro in ";
            $sql .= "($listeproduit)";

            $connex = new Connexion();
            $con = $connex->controle_file_gce();

            $req_gce = oci_parse($con, $sql);
            if ($req_gce == false) {
                          throw new \Exception('Erreur De la mise à jour');
            } else {
                oci_execute($req_gce);
            }

    }

}